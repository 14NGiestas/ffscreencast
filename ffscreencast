#!/usr/bin/env bash


################################################################################
# File name and path
################################################################################

# Name of the output file
DATE=$(date +%Y-%m-%d)
TIME=$(date +%H.%M.%S)
NAME="Screencast ${DATE} at ${TIME}"

# Where to save it
DIR="${HOME}/Desktop"


################################################################################
# FFmpeg Options
################################################################################

# Get current resolution
#RESO=$(system_profiler SPDisplaysDataType | grep Resolution)
#WIDTH=$(echo $RESO | awk '{print $2}')
#HEIGHT=$(echo $RESO | awk '{print $4}')

# -qp 0 tells x264 to encode in lossless mode,
# -preset ultrafast advises it to do so fast.
#LOSSLESS="-qp 0"
#LOSSLESS=""
#PRESET="ultrafast"
#PIXFMT="uyvy422"


# Specify the container format.
# @param string FF_CONTAINER (mkv, avi)
FF_CONTAINER="mkv"


# Specify franes per second
# @param integer FF_FRAME_RATE
FF_FRAME_RATE="30"




################################################################################
# VARIABLES (DO NOT EDIT)
################################################################################

OPTIONS="-framerate ${FF_FRAME_RATE} "
# ffmpeg -f avfoundation -i 1 -c:v libx264rgb -crf 0 -preset:v ultrafast -c:a pcm_s16le -af aresample=async=1:first_pts=0 out.mkv




################################################################################
# MAIN ENTRY POINT
################################################################################

# Check if ffmpeg exists
if ! command -v ffmpeg > /dev/null 2>&1; then
	echo "ffmpeg not found."
	exit 1
fi



# TODO: Linux & BSD
if [ "$(uname)" = "Darwin" ]; then

	# If only one device is present, pre-select it as the default device
	if [ "$(ffmpeg -f avfoundation -list_devices true -i '' 2>&1 | grep 'Capture screen' -c)" = "1" ]; then
		VIDEO="$(ffmpeg -f avfoundation -list_devices true -i '' 2>&1 | grep 'Capture screen' | grep -o '\[[0-9]\]' | sed 's/\[//g' | sed 's/\]//g')"
	fi
	DEVICE_NAMES="$(ffmpeg -f avfoundation -list_devices true -i '' 2>&1 | grep 'Capture screen' | grep -o '\[[0-9]\].*$')"
	DEVICE_INDEX="$(echo "${DEVICE_NAMES}" | grep -o '\[[0-9]\]' | sed 's/\[//g' | sed 's/\]//g')"
fi



# If no default device is set, ask the user to choose one
if [ -z ${VIDEO+x} ]; then
	# List available devices
	printf "$(tput setaf 2)Available devices:$(tput sgr0)\n%s\n" "${DEVICE_NAMES}"

	# Ask for device number
	while true; do
		read -p "$(tput setaf 2)Enter device number:$(tput sgr0) " dn < /dev/tty
		[[ $DEVICE_INDEX =~ $dn ]] && break || echo 'Wrong device number'
	done
	VIDEO="${dn}"
fi



# Start recording
if [ "$(uname)" = "Darwin" ]; then

	# show command
	echo "ffmpeg -hide_banner -loglevel info  -f avfoundation -i \"${VIDEO}\" ${OPTIONS} \"${DIR}/${NAME}.${FF_CONTAINER}\""
	echo ""

	# start
	ffmpeg -hide_banner -loglevel info -f avfoundation ${OPTIONS} -i "${VIDEO}" "${DIR}/${NAME}.${FF_CONTAINER}"
fi

