#!/usr/bin/env bash
#
# @Author:  Patrick Plocke <patrick@plocke.de>
# @GPG      0x28BF179F
# @Licence: MIT
#
# @Description:
# ffscreencast is a shell wrapper for ffmpeg that allows fool-proof screen
# recording via the command line. It will auto-detect all available monitors,
# cameras and microphones and is able to interactively or manually choose the
# desired recording device(s). Additionally ffscreencast will let you overlay
# the camera stream on top of the desktop session.
#
# Besides that ffscreencast can act as an ffmpeg command generator. Every
# available option can also just show the corresponding ffmpeg command instead
# of executing it.

INFO_AUTHOR="Patrick Plocke <patrick@plocke.de>"
INFO_GPGKEY="0x28BF179F"
INFO_DATE="2015-09-04"
INFO_LICENSE="MIT"
INFO_VERSION="0.3-beta"




################################################################################
# File name and path
################################################################################

# Name of the output file
DATE=$(date +%Y-%m-%d)
TIME=$(date +%H.%M.%S)
NAME="Screencast ${DATE} at ${TIME}"

# Where to save it
DIR="${HOME}/Desktop"


################################################################################
# FFmpeg Options
################################################################################

# Get current resolution
#RESO=$(system_profiler SPDisplaysDataType | grep Resolution)
#WIDTH=$(echo $RESO | awk '{print $2}')
#HEIGHT=$(echo $RESO | awk '{print $4}')

# -qp 0 tells x264 to encode in lossless mode,
# -preset ultrafast advises it to do so fast.
#LOSSLESS="-qp 0"
#LOSSLESS=""
#PRESET="ultrafast"
#PIXFMT="uyvy422"
#OPTIONS="-framerate ${FF_FRAME_RATE} "
# ffmpeg -f avfoundation -i 1 -c:v libx264rgb -crf 0 -preset:v ultrafast -c:a pcm_s16le -af aresample=async=1:first_pts=0 out.mkv

################################################################################
# FUNCTIONS
################################################################################

usage() {
	printf "%s %s %s\n" "Usage:" "${0}" "[-s[num]] [--sargs=] [-a[num]] [--aargs=] [-c[num] [--cargs=] [--oargs=] [-e<ext>] [--dry]"
	printf "%s %s %s\n" "      " "${0}" "--slist [--dry]"
	printf "%s %s %s\n" "      " "${0}" "--alist [--dry]"
	printf "%s %s %s\n" "      " "${0}" "--clist [--dry]"
	printf "%s %s %s\n" "      " "${0}" "--help"
	printf "%s %s %s\n" "      " "${0}" "--version"
	printf "%s %s %s\n" "      " "${0}" "--test"
	echo
	echo "When invoked without any arguments, it will start screen recording"
	echo "on the default screen without sound and without camera overlay."
	echo
	echo "Input options:"
	echo "-s[num]           (Default) Enable screen capturing [with device number X]."
	echo "                  If no device number is specified it will use the default, if only"
	echo "                  one device is present, otherwise it will ask you to choose one"
	echo "                  Use: -s or -s1"
	echo
	echo "--sargs=          Additional screen arguments."
	echo "                  Specify additional ffmpeg arguments for the screen input device."
	echo "                  Use: --sargs=\"-framerate 30\""
	echo "                  Default: ''"
	echo
	echo "-a[num]           Enable audio capturing [with device number X]"
	echo "                  If no device number is specified it will use the default, if only"
	echo "                  one device is present, otherwise it will ask you to choose one"
	echo "                  Use: -a or -a1"
	echo
	echo "--aargs=          Additional audio arguments."
	echo "                  Specify additional ffmpeg arguments for the audio input device."
	echo "                  Use: --aargs=\"-ac 1\""
	echo "                  Default: '-ac 2'"
	echo
	echo "-c[num]           Add camera overlay [with device number X]"
	echo "                  If no device number is specified it will use the default, if only"
	echo "                  one device is present, otherwise it will ask you to choose one"
	echo "                  Use: -c or -c1"
	echo
	echo "--cargs=          Additional camera arguments"
	echo "                  Specify additional ffmpeg arguments for the camera input device."
	echo "                  Use: --cargs=\"-video_size 1280x720\""
	echo "                  Default: ''"
	echo
	echo
	echo "Output options:"
	echo "-e<ext>           Output video format extension (Default: mkv)"
	echo "                  E.g.: -emkv, or -eavi, or -emp4"
	echo
	echo "-oargs=           Additional output arguments"
	echo "                  Specify additional ffmpeg arguments for the output encoding."
	echo "                  Use: --oargs=\"-crf 0\""
	echo "                  Default: '-crf 0 -preset ultrafast'"
	echo
	echo
	echo "Behavior options:"
	echo "--dry             Show the command (without executing)"
	echo
	echo
	echo "List options:"
	echo "--list            List all devices"
	echo "--slist           Only list screen capturing devices (monitors)"
	echo "--alist           Only list audio capturing devices (microphones)"
	echo "--clist           Only list camera capturing devices (cams)"
	echo
	echo
	echo "System information:"
	echo "--help            Show this help screen"
	echo "--version         Show version information"
	echo "--test            Test requirements"
}

version() {
	printf "Version: %s (%s)\n" "${INFO_VERSION}" "${INFO_DATE}"
	printf "Author:  %s (%s)\n" "${INFO_AUTHOR}" "${INFO_GPGKEY}"
	printf "License: %s\n" "${INFO_LICENSE}"
}

################################################################################
# Check requirements
################################################################################

# @param string "verbose"
check_requirements() {
	uname="$(uname)"

	#### 1.) Check Operating System
	if [ "${uname}" != "Linux"  ] && [ "${uname}" != 'Darwin'  ]; then
		echo "Unsupported operating system."
		echo "It currently only works on Linux and OSX."
		echo "Sorry ;-)"
		return 1
	elif [ "${1}" = "verbose" ]; then
		echo "[OK] Operating system supported: ${uname}"
	fi

	#### 2.) Check ffmpeg
	if ! command -v ffmpeg > /dev/null 2>&1; then
		echo "ffmpeg not found."
		return 1
	elif [ "${1}" = "verbose" ]; then
		echo "[OK] ffmpeg found: $(which ffmpeg)"
	fi

	#### 3.) Check OSX
	if [ "${uname}" = "Darwin" ]; then
		if ! ffmpeg -f avfoundation -list_devices true -i "" 2>&1 | grep 'AVFoundation input device' > /dev/null 2>&1; then
			echo "OSX: AVFoundation not available in ffmpeg"
			return 1
		elif [ "${1}" = "verbose" ]; then
			echo "[OK] OSX: AVFoundation available in ffmpeg"
		fi
	fi

	#### 4.) Check Linux
	if [ "${uname}" = "Linux" ]; then
		if ! ffmpeg 2>&1 | grep '\-\-enable-x11grab' > /dev/null 2>&1; then
			echo "Linux: x11grab not available in ffmpeg"
			return 1
		elif [ "${1}" = "verbose" ]; then
			echo "[OK] Linux: x11grab available in ffmpeg"
		fi

		if ! command -v v4l2-ctl > /dev/null 2>&1; then
			echo "Linux: v4l2-ctl not found."
			echo
			echo "Debian: apt-get install v4l-utils"
			echo "CentOS: yum install v4l-utils"
			echo "Arch:   pacman -S v4l-utils"
			return 1
		elif [ "${1}" = "verbose" ]; then
			echo "[OK] Linux: v4l2-ctl found: $(which v4l2-ctl)"
		fi

		if ! command -v arecord > /dev/null 2>&1; then
			echo "Linux: arecord not found."
			echo
			echo "Debian: apt-get install alsa-utils"
			echo "CentOS: yum install alsa-utils"
			echo "Arch:   pacman -S alsa-utils"
			return 1
		elif [ "${1}" = "verbose" ]; then
			echo "[OK] Linux: arecord found: $(which arecord)"
		fi

		if ! command -v xdpyinfo > /dev/null 2>&1; then
			echo "Linux: xdpyinfo not found."
			echo
			echo "Debian: apt-get install x11-utils"
			echo "CentOS: yum install xorg-x11-utils"
			echo "Arch:   pacman -S xorg-xdpyinfo"
			return 1
		elif [ "${1}" = "verbose" ]; then
			echo "[OK] Linux: xdpyinfo found: $(which xdpyinfo)"
		fi
	fi

	return 0
}





################################################################################
# Get OS dependent device names
################################################################################
# @param string "dry": Show command only
get_screen_device_names() {
	if [ "$(uname)" = "Darwin" ]; then
		DEVICE_NAMES="paste <(echo \"\$(ffmpeg -f avfoundation -list_devices true -i '' 2>&1 | grep 'AVFoundation input' | sed -n '/AVFoundation video/,/AVFoundation audio/p' | grep -oE '\[[0-9]\].*$' | grep 'Capture screen')\") <(echo \"\$(system_profiler SPDisplaysDataType | sed -n '/^\s.*Displays:$/,\$p' | grep -vE '^\s.*Displays:$' | grep -E '^\s.*w*:$|Resolution:' | sed 'N;s/\n/ /' | sed 's/ \{1,\}/ /g' | sed 's/^[ \t ]*//;s/[ \t ]*$//')\")"
	elif [ "$(uname)" = "Linux" ]; then
		DEVICE_NAMES="xdpyinfo | grep -A 1 -E '^screen #[0-9]*:' | grep -vE '^\-\-' | sed 'N;s/\n/ /' | sed 's/dimensions://g' | sed 's/ \{1,\}/ /g' | awk '{printf \"[%d] %s\n\", NR, \$0}'"
	fi
	[ "${1}" = "yes" ] && echo "${DEVICE_NAMES}" || eval $DEVICE_NAMES
}
get_audio_device_names() {
	if [ "$(uname)" = "Darwin" ]; then
		DEVICE_NAMES="ffmpeg -f avfoundation -list_devices true -i '' 2>&1 | grep 'AVFoundation input' | sed -n '/AVFoundation audio/,\$p' | grep -oE '\[[0-9]\].*$'"
	elif [ "$(uname)" = "Linux" ]; then
		DEVICE_NAMES="arecord -l | grep -E '^card\s[0-9]*:' | awk '{printf \"[%d] %s\n\", NR, \$0}'"
	fi
	[ "${1}" = "yes" ] && echo "${DEVICE_NAMES}" || eval $DEVICE_NAMES
}
get_camera_device_names() {
	if [ "$(uname)" = "Darwin" ]; then
		DEVICE_NAMES="ffmpeg -f avfoundation -list_devices true -i '' 2>&1 | grep 'AVFoundation input' | sed -n '/AVFoundation video/,/AVFoundation audio/p' | grep -oE '\[[0-9]\].*$' | grep 'Camera'"
	elif [ "$(uname)" = "Linux" ]; then
		DEVICE_NAMES="v4l2-ctl --list-devices | grep -B 1 '/dev/video' | grep -vE '^\-\-' | sed 'N;s/\n/ /' | sed 's/ \{1,\}/ /g' | awk '{printf \"[%d] %s\n\", NR, \$0}'"
	fi
	[ "${1}" = "yes" ] && echo "${DEVICE_NAMES}" || eval $DEVICE_NAMES
}


################################################################################
# Get device indices
################################################################################
get_screen_device_indices() {
	devices="$(get_screen_device_names | grep -oE '^\[[0-9]\]' | sed 's/\[//g' | sed 's/\]//g')"
	echo $devices
}
get_audio_device_indices() {
	devices="$(get_audio_device_names | grep -oE '^\[[0-9]\]' | sed 's/\[//g' | sed 's/\]//g')"
	echo $devices
}
get_camera_device_indices() {
	devices="$(get_camera_device_names | grep -oE '^\[[0-9]\]' | sed 's/\[//g' | sed 's/\]//g')"
	echo $devices
}


################################################################################
# Count devices
################################################################################
count_screen_devices() {
	devices="$(get_screen_device_names | grep -c '')"
	echo $devices
}
count_audio_devices() {
	devices="$(get_audio_device_names | grep -c '')"
	echo $devices
}
count_camera_devices() {
	devices="$(get_camera_device_names | grep -c '')"
	echo $devices
}



################################################################################
# Check if device indices exist
################################################################################
screen_device_exists() {
	index=$1
	indices="$(get_screen_device_indices)"
	[[ $indices =~ $index ]] && return 0 || return 1
}
audio_device_exists() {
	index=$1
	indices="$(get_audio_device_indices)"
	[[ $indices =~ $index ]] && return 0 || return 1
}
camera_device_exists() {
	index=$1
	indices="$(get_audio_device_indices)"
	[[ $indices =~ $index ]] && return 0 || return 1
}


################################################################################
# Interactively choose devices
################################################################################
choose_screen_device() {
	indices="$(get_screen_device_indices)"

	# List available devices
	printf "$(tput setaf 2)Available devices:$(tput sgr0)\n%s\n" "$(get_screen_device_names)"

	# Ask for device number
	while true; do
		read -p "$(tput setaf 2)Enter device number:$(tput sgr0) " dn < /dev/tty
		[ ${#dn} -gt 0 ] && [[ $indices =~ $dn ]] && break || echo 'Wrong device number'
	done
	return $dn
}
choose_audio_device() {
	indices="$(get_audio_device_indices)"

	# List available devices
	printf "$(tput setaf 2)Available devices:$(tput sgr0)\n%s\n" "$(get_audio_device_names)"

	# Ask for device number
	while true; do
		read -p "$(tput setaf 2)Enter device number:$(tput sgr0) " dn < /dev/tty
		[ ${#dn} -gt 0 ] && [[ $indices =~ $dn ]] && break || echo 'Wrong device number'
	done
	return $dn
}
choose_camera_device() {
	indices="$(get_camera_device_indices)"

	# List available devices
	printf "$(tput setaf 2)Available devices:$(tput sgr0)\n%s\n" "$(get_camera_device_names)"

	# Ask for device number
	while true; do
		read -p "$(tput setaf 2)Enter device number:$(tput sgr0) " dn < /dev/tty
		[ ${#dn} -gt 0 ] && [[ $indices =~ $dn ]] && break || echo 'Wrong device number'
	done
	return $dn
}

# Test if argument is an integer
# @param  mixed
# @return integer	0: is number | 1: not a number
isint() {
	printf '%d' "$1" >/dev/null 2>&1 && return 0 || return 1;
}


################################################################################
# MAIN ENTRY POINT
################################################################################

########################################
# 1.) Default options
########################################

#### Input options
#### ------------------------------

# Enable screen recording by default
screen=yes
sargs=""

camera=no
cargs=""

audio=no
aargs="-ac 2"


#### Output options
#### ------------------------------

# Set default video container extension
ext="mkv"

# Audio codec
audio_codec="pcm_s16le"

# Video codec
video_codec="libx264"

# Custom ffmpeg arguments
oargs="-crf 0 -preset ultrafast"
#args="-qp 0 -preset ultrafast"


########################################
# 2.) Evaluate cmd arguments
########################################

while [ $# -gt 0  ]; do
	case "$1" in

		#### ---- Screen options ----

		# Screen input device
		-s | -s[0-9]*)
			screen=yes
			screen_num="$(echo "$1" | sed 's/^..//g')"
			if [ ${#screen_num} -gt 0 ]; then
				if ! isint ${screen_num} > /dev/null 2>&1; then
					echo "Invalid screen number for -s"
					exit -1
				fi
			fi
			;;
		# Screen args
		--sargs=*)
			sargs="$(echo "$1" | sed 's/^--sargs=//g')"
			;;


		#### ---- Audio options ----

		# Audio recording
		-a | -a[0-9]*)
			audio=yes
			audio_num="$(echo "$1" | sed 's/^..//g')"
			if [ ${#audio_num} -gt 0 ]; then
				if ! isint ${audio_num} > /dev/null 2>&1; then
					echo "Invalid audio number for -a"
					exit -1
				fi
			fi
			;;
		# Audio args
		--aargs=*)
			sargs="$(echo "$1" | sed 's/^--aargs=//g')"
			;;


		#### ---- Camera options ----

		# Camera input device
		-c | -c[0-9]*)
			camera=yes
			camera_num="$(echo "$1" | sed 's/^..//g')"
			if [ ${#camera_num} -gt 0 ]; then
				if ! isint ${camera_num} > /dev/null 2>&1; then
					echo "Invalid camera number for -c"
					exit -1
				fi
			fi
			;;
		# Camera args
		--cargs=*)
			cargs="$(echo "$1" | sed 's/^--cargs=//g')"
			;;



		#### ---- Output options ----
		-e[a-z]*)
			ext="$(echo "$1" | sed 's/^..//g')"
			;;

		--oargs=*)
			oargs="$(echo "$1" | sed 's/^--oargs=//g')"
			;;


		#### ---- Misc options ----

		--dry)
			l_dry=yes
			;;
		--list)
			l_list=yes
			;;
		--slist)
			l_slist=yes
			;;
		--alist)
			l_alist=yes
			;;
		--clist)
			l_clist=yes
			;;
		--help)
			l_help=yes
			;;
		--version)
			l_version=yes
			;;
		--test)
			l_test=yes
			;;
		*)
			echo "Invalid argument: '${1}'"
			echo "Type '${0} --help' for available options."
			exit 1
			;;
	esac
	shift
done



########################################
# 3.) Help/Version/Test
########################################
if [ "${l_help}" = "yes" ]; then
	usage
	exit 0
fi
if [ "${l_version}" = "yes" ]; then
	version
	exit 0
fi
if [ "${l_test}" = "yes" ]; then
	if ! check_requirements "verbose"; then
		exit -1
	else
		exit 0
	fi
fi


########################################
# 4.) Check requirements
########################################

if ! check_requirements; then
	exit -1
fi


########################################
# 5.) List options
########################################

if [ "${l_list}" = "yes" ]; then
	echo "Available screen recording devices (monitors):"
	echo
	get_screen_device_names "${l_dry}"
	echo
	echo

	echo "Available audio recording devices (monitors):"
	echo
	get_audio_device_names "${l_dry}"
	echo
	echo

	echo "Available camera recording devices:"
	echo
	get_camera_device_names "${l_dry}"
	exit 0
fi

if [ "${l_slist}" = "yes" ]; then
	echo "Available screen recording devices (monitors):"
	echo
	get_screen_device_names "${l_dry}"
	exit 0
fi
if [ "${l_alist}" = "yes" ]; then
	echo "Available audio recording devices (microphones):"
	echo
	get_audio_device_names "${l_dry}"
	exit 0
fi
if [ "${l_clist}" = "yes" ]; then
	echo "Available camera recording devices:"
	echo
	get_camera_device_names "${l_dry}"
	exit 0
fi



########################################
# 6.) Build ffmpeg options
########################################

# Does the user want screen recording?
if [ ! -z ${screen+x} ] && [ "${screen}" = "yes" ]; then

	# If screen device was set via argument list, validate it
	if [ ${#screen_num} -gt 0 ]; then
		if ! screen_device_exists "$screen_num"; then
			echo "Screen recording device: '${screen_num}' does not exist."
			exit -1
		fi
		screen_device="$screen_num"

	# If screen device was not set via argument list, choose one
	else
		# Use default screen if only one screen exists
		if [ "$(count_screen_devices)" = "1" ]; then
			screen_device=$(get_screen_device_indices)
		else
			choose_screen_device
			screen_device=$?
		fi
	fi
fi

# Does the user want audio recording?
if [ ! -z ${audio+x} ] && [ "${audio}" = "yes" ]; then

	# If screen device was set via argument list, validate it
	if [ ${#audio_num} -gt 0 ]; then
		if ! audio_device_exists "$audio_num"; then
			echo "Audio recording device: '${audio_num}' does not exist."
			exit -1
		fi
		audio_device="$audio_num"

	# If audio device was not set via argument list, choose one
	else
		# Use default audio if only one microphone exists
		if [ "$(count_audio_devices)" = "1" ]; then
			audio_device=$(get_audio_device_indices)
		else
			choose_audio_device
			audio_device=$?
		fi
	fi
fi

# Does the user want camera recording?
if [ ! -z ${camera+x} ] && [ "${camera}" = "yes" ]; then

	# If camera device was set via argument list, validate it
	if [ ${#camera_num} -gt 0 ]; then
		if ! camera_device_exists "$camera_num"; then
			echo "Camera recording device: '${camera_num}' does not exist."
			exit -1
		fi
		camera_device="$camera_num"

	# If camera device was not set via argument list, choose one
	else
		# Use default camera if only one microphone exists
		if [ "$(count_camera_devices)" = "1" ]; then
			camera_device=$(get_camera_device_indices)
		else
			choose_camera_device
			camera_device=$?
		fi
	fi
fi




########################################
# 7. Build os-specific ffmpeg cmd
########################################

# ffmpeg -f avfoundation -i ":0" -f avfoundation -i "1"  -f avfoundation -r 25 -i ":0" -c:a mp3 -c:v libx264 -crf 0 -preset ultrafast -threads 0  ~/Desktop/test.mkv



if [ "$(uname)" = "Darwin" ]; then

	FF_INPUT_FRAMEWORK_SCREEN="avfoundation"
	FF_INPUT_FRAMEWORK_SOUND="avfoundation"
	FF_INPUT_FRAMEWORK_CAMERA="avfoundation"

	# If not specified a custom resolution, use the one from the current chosen monitor
	if [ ${#screen_resolution} -eq 0 ]; then
		screen_resolution="$(get_screen_device_names | grep "\[${screen_device}\]" | grep -oE '[0-9]*\sx\s[0-9]*' | sed 's/\s//g')"
	fi

	# Get ffmpeg audio command (if audio was selected)
	if [ ! -z ${audio+x} ] && [ "${audio}" = "yes" ]; then
		audio_device=":${audio_device}"
	fi

elif [ "$(uname)" = "Linux" ]; then

	FF_INPUT_FRAMEWORK_SCREEN="x11grab"
	FF_INPUT_FRAMEWORK_SOUND="alsa"		# TODO: what about pulse??
	FF_INPUT_FRAMEWORK_CAMERA="v4l2"

	# If not specified a custom resolution, use the one from the current chosen monitor
	if [ ${#screen_resolution} -eq 0 ]; then
		screen_resolution="$(get_screen_device_names | grep "\[${screen_device}\]" | grep -oE '[0-9]*x[0-9]*\spixels' | awk '{print $1}')"
	fi

	# Get ffmpeg audio command (if audio was selected)
	if [ ! -z ${audio+x} ] && [ "${audio}" = "yes" ]; then
		audio_name="$(get_audio_device_names | grep "\[${audio_device}\]")"
		audio_card="$(echo "${audio_name}" | grep -oE 'card\s[0-9]*' | awk '{print $2}')"
		audio_device="$(echo "${audio_name}" | grep -oE 'device\s[0-9]*' | awk '{print $2}')"
		audio_device="hw:${audio_card},${audio_device}"
	fi

	# Get camera device
	if [ ! -z ${camera+x} ] && [ "${camera}" = "yes" ]; then
		camera_device="$(get_camera_device_names | grep "\[${camera_device}\]" | grep -oE '/dev/video[0-9]*')"
	fi

fi



FFMPEG="ffmpeg"
FFMPEG="${FFMPEG} -hide_banner -loglevel info"
FFMPEG="${FFMPEG} -f ${FF_INPUT_FRAMEWORK_SCREEN} ${sargs} -i \"${screen_device}\""

if [ ! -z ${camera+x} ] && [ "${camera}" = "yes" ]; then
	FFMPEG="${FFMPEG} -f ${FF_INPUT_FRAMEWORK_CAMERA} ${cargs} -i \"${camera_device}\""
fi

if [ ! -z ${audio+x} ] && [ "${audio}" = "yes" ]; then
	FFMPEG="${FFMPEG} -f ${FF_INPUT_FRAMEWORK_SOUND} ${aargs} -i \"${audio_device}\""
	FFMPEG="${FFMPEG} -c:a ${audio_codec}"
fi

FFMPEG="${FFMPEG} -c:v ${video_codec}"
FFMPEG="${FFMPEG} ${oargs}"
if [ ! -z ${camera+x} ] && [ "${camera}" = "yes" ]; then
	FFMPEG="${FFMPEG} -filter_complex 'overlay=main_w-overlay_w-10:main_h-overlay_h-10'"
fi

FFMPEG="${FFMPEG} \"${DIR}/${NAME}.${ext}\""





#### RUN
if [ "${l_dry}" = "yes" ]; then
	echo "$FFMPEG"
else
	echo "$FFMPEG"
	eval $FFMPEG
fi
